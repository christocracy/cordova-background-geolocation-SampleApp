{"ast":null,"code":"//import {Platform} from 'ionic-angular';\n/**\n* @class BGService This is a wrapper for interacting with the BackgroundGeolocation plugin\n* througout the app.\n*/\nexport class TestService {\n  constructor() {}\n  getPlugin() {\n    return window.BackgroundGeolocation;\n  }\n  startSqliteTest(delay) {\n    this.getLocationsTask = setInterval(() => {\n      this.getPlugin().getLocations(function (rs, tid) {\n        console.log('- getLocations: ', rs.length);\n        this.getPlugin().finish(tid);\n      });\n    }, delay);\n    this.getCurrentPositionTask = setInterval(() => {\n      this.getPlugin().getCurrentPosition(function (location, tid) {\n        console.log('- getCurrentPosition');\n        this.getPlugin().finish(tid);\n      });\n    }, delay);\n  }\n  stopSqliteTest() {\n    clearInterval(this.getLocationsTask);\n    clearInterval(this.getCurrentPositionTask);\n  }\n  addGeofenceTest(length, prefix, success, failure) {\n    prefix = prefix || 'default';\n    this.getPlugin().getCurrentPosition((location, taskId) => {\n      for (var n = 0; n < length; n++) {\n        this.getPlugin().addGeofence({\n          notifyOnExit: true,\n          notifyOnEntry: true,\n          identifier: 'geofence_' + prefix + '_' + n,\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude,\n          radius: 200\n        }, success, failure);\n      }\n      this.getPlugin().finish(taskId);\n    });\n  }\n  addGeofencesTest(length, prefix, success, failure) {\n    prefix = prefix || 'default';\n    var rs = [];\n    this.getPlugin().getCurrentPosition((location, taskId) => {\n      for (var n = 0; n < length; n++) {\n        rs.push({\n          notifyOnExit: true,\n          notifyOnEntry: true,\n          identifier: 'geofence_' + prefix + '_' + n,\n          latitude: 1,\n          longitude: 1,\n          radius: 200\n        });\n      }\n      this.getPlugin().addGeofences(rs, success, failure);\n      this.getPlugin().finish(taskId);\n    });\n  }\n  removeGeofencesTest(success, failure) {\n    this.addGeofencesTest(1, 'remove_test', () => {\n      this.getPlugin().getGeofences(rs => {\n        console.info('- getGeofences: ', rs.length);\n        this.getPlugin().removeGeofences(response => {\n          console.log('- Success: ', response);\n          this.getPlugin().getGeofences(rs => {\n            console.log('- removeGeofences: ', rs.length);\n          });\n        }, error => {\n          console.warn('- Error: ', error);\n        });\n      });\n    }, error => {\n      console.warn('Add geofence error');\n    });\n  }\n  insertLocations(length, success, failure) {\n    this.getPlugin().getCurrentPosition((l, t) => {\n      for (var i = 0; i < length; i++) {\n        this.getPlugin().insertLocation({\n          coords: {\n            latitude: l.coords.latitude,\n            longitude: l.coords.longitude\n          },\n          timestamp: l.timestamp,\n          uuid: 'uuid-' + i\n        }, success, failure);\n      }\n    });\n  }\n  startGeofenceTest() {\n    var geofences = [{\n      identifier: \"Geofence 1\",\n      notifyOnEntry: true,\n      notifyOnExit: true,\n      radius: 200,\n      latitude: 45.5248868,\n      longitude: -73.6424362\n    }, {\n      identifier: \"Geofence 2\",\n      notifyOnEntry: true,\n      notifyOnExit: true,\n      radius: 200,\n      latitude: 45.5225079,\n      longitude: -73.6341922\n    }, {\n      identifier: \"Geofence 3\",\n      notifyOnEntry: true,\n      notifyOnExit: true,\n      radius: 200,\n      latitude: 45.5207131,\n      longitude: -73.6279527\n    }];\n    var result = {\n      total: 0,\n      ENTER: 0,\n      EXIT: 0\n    };\n    this.getPlugin().removeGeofences();\n    this.getPlugin().addGeofences(geofences);\n    this.getPlugin().on('geofence', (event, tid) => {\n      if (!result[event.action]) {\n        result[event.action] = 0;\n      }\n      result[event.action]++;\n      result.total++;\n      console.log('- Geofence test: ', result);\n      if (result.total === 2 * geofences.length) {\n        if (result.ENTER === 3 && result.EXIT == 3) {\n          this.getPlugin().changePace(false);\n          alert('Geofence test SUCCESS');\n          console.info('Geofence test success: ', result);\n        }\n      }\n    });\n    this.getPlugin().stop();\n    this.getPlugin().start(() => {\n      this.getPlugin().changePace(true);\n    });\n  }\n  /**\n  * Auto-build a scheule based upon current time.\n  *                ______________..._______________                      ___...\n  * ______________|                                |____________________|\n  * |<-- delay -->|<---------- duration ---------->|<---- interval ---->|<-- duration -->\n  *\n  * @param {Integer} count How many schedules to generate?\n  * @param {Integer} delay How many minutes in future to start generating schedules\n  * @param {Integer} duration How long is each trigger event\n  * @param {Integer} interval How long between trigger events\n  */\n  generateSchedule(count, delay, duration, interval) {\n    // Start 2min from now\n    var now = new Date();\n    var start = new Date(now.getTime() + delay * 60000);\n    var rs = [];\n    for (var n = 0, len = count; n < len; n++) {\n      var end = new Date(start.getTime() + duration * 60000);\n      var schedule = '1-7 ' + start.getHours() + ':' + start.getMinutes() + '-' + end.getHours() + ':' + end.getMinutes();\n      start = new Date(end.getTime() + interval * 60000);\n      rs.push(schedule);\n    }\n    return rs;\n  }\n  createGeofences(data, interval, params, callback) {\n    //bgGeo.removeGeofences();\n    interval = interval || 1;\n    params = params || {\n      notifyOnEntry: true\n    };\n    params.notifyOnEntry = params.notifyOnEntry || false;\n    params.notifyOnExit = params.notifyOnExit || false;\n    params.notifyOnDwell = params.notifyOnDwell || false;\n    var geofences = [];\n    var index = 1;\n    for (var n = 0, len = data.length; n < len; n++) {\n      if (n % interval) {\n        continue;\n      }\n      geofences.push({\n        identifier: 'geofences_test_' + index++,\n        latitude: data[n].lat,\n        longitude: data[n].lng,\n        radius: 200,\n        extras: {\n          geofence_extra_foo: \"bar\"\n        },\n        notifyOnExit: params.notifyOnExit,\n        notifyOnEntry: params.notifyOnEntry,\n        notifyOnDwell: params.notifyOnDwell\n      });\n    }\n    ;\n    this.getPlugin().addGeofences(geofences, result => {\n      console.log('Geofences loaded');\n      callback();\n    }, error => {\n      console.warn('Geofence load failure: ', error);\n      callback();\n    });\n  }\n  crudTest() {\n    console.log(\"******************************\");\n    console.log(\"* Crud test\");\n    console.log(\"******************************\");\n    this.getPlugin().setConfig({\n      autoSync: false\n    });\n    this.getPlugin().getCurrentPosition((location, taskId) => {\n      this.getPlugin().getLocations((rs, tid) => {\n        if (!rs.length) {\n          console.warn(\"- getLocations FAIL: \", rs.length);\n          return;\n        }\n        var uuid = rs[0].uuid;\n        console.log(\"- uuid: \", uuid);\n        this.getPlugin().getCount(count => {\n          console.log('- Count BEFORE: ', count);\n        });\n        var params = {\n          coords: location.coords,\n          extras: {\n            foo: 'insertLocation without timestamp'\n          }\n        };\n        this.getPlugin().insertLocation(params, () => {\n          console.log('- INSERT location without timetamp');\n        }, error => {\n          console.log('- INSERT FAILED: ', error);\n        });\n        this.getPlugin().getLocation(uuid, location => {\n          console.log('- getLocation SUCCESS: ', JSON.stringify(location, null, 2));\n          location.extras = {\n            \"CRUD_TEST\": \"------------ CrudTest updateLocation ---------------\"\n          };\n          this.getPlugin().updateLocation(location, () => {\n            console.log('- Update location SUCCESS');\n            this.getPlugin().getLocation(uuid, l => {\n              console.log('- Get Location after UPDATE: ', JSON.stringify(l, null, 2));\n              this.getPlugin().destroyLocation(uuid, () => {\n                console.log('- Destroy Location SUCCESS', uuid);\n                this.getPlugin().getCount(count => {\n                  console.log('- Count: ', count);\n                });\n                this.getPlugin().getLocation(uuid, () => {\n                  console.warn('- Get Location should not SUCCEED!');\n                }, () => {\n                  console.log('- GOOD: getLocation failed after destroy');\n                });\n              }, error => {\n                console.warn('- Destroy Location FAILURE: ', uuid);\n              });\n            }, error => {\n              console.warn('- Get Location FAILED: ', error);\n            });\n          }, error => {\n            console.log('- Update location FAILURE: ', error);\n          });\n        }, error => {\n          console.log('- Failed to find location; ', uuid);\n        });\n      });\n    }, {\n      persist: true\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
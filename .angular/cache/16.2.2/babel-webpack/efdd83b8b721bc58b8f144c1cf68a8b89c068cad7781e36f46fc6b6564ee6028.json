{"ast":null,"code":"import _asyncToGenerator from \"/Users/chris/workspace/background-geolocation/cordova/SampleApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport BackgroundGeolocation from \"../cordova-background-geolocation\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction HelloWorldPage_ion_grid_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-grid\", 15)(1, \"ion-row\", 16)(2, \"ion-col\", 17)(3, \"strong\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"ion-col\", 18)(6, \"ion-label\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"ion-row\")(9, \"pre\")(10, \"code\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const event_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(event_r1.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(event_r1.timestamp);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(event_r1.content);\n  }\n}\nconst LocalStorage = window.localStorage;\nlet HelloWorldPage = /*#__PURE__*/(() => {\n  var _class;\n  class HelloWorldPage {\n    constructor(navCtrl, router, zone) {\n      this.navCtrl = navCtrl;\n      this.router = router;\n      this.zone = zone;\n      this.events = [];\n      this.subscriptions = [];\n    }\n    subscribe(subscription) {\n      this.subscriptions.push(subscription);\n    }\n    unsubscribe() {\n      this.subscriptions.forEach(subscription => subscription.remove());\n      this.subscriptions = [];\n    }\n    ngAfterContentInit() {\n      console.log('⚙️ ngAfterContentInit');\n      this.configureBackgroundGeolocation();\n    }\n    ionViewWillEnter() {\n      console.log('⚙️ ionViewWillEnter');\n    }\n    ngOnInit() {}\n    ngOnDestroy() {\n      this.unsubscribe();\n    }\n    configureBackgroundGeolocation() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Step 1:  Listen to BackgroundGeolocation events.\n        _this.subscribe(BackgroundGeolocation.onEnabledChange(_this.onEnabledChange.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onLocation(_this.onLocation.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onMotionChange(_this.onMotionChange.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onGeofence(_this.onGeofence.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onActivityChange(_this.onActivityChange.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onHttp(_this.onHttp.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onProviderChange(_this.onProviderChange.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onPowerSaveChange(_this.onPowerSaveChange.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onConnectivityChange(_this.onConnectivityChange.bind(_this)));\n        _this.subscribe(BackgroundGeolocation.onAuthorization(_this.onAuthorization.bind(_this)));\n        // Compose #url: tracker.transistorsoft.com/locations/{username}\n        const orgname = LocalStorage.getItem('orgname');\n        const username = LocalStorage.getItem('username');\n        const token = yield BackgroundGeolocation.findOrCreateTransistorAuthorizationToken(orgname, username, environment.TRACKER_HOST);\n        // Step 2:  Configure the plugin\n        BackgroundGeolocation.ready({\n          reset: true,\n          debug: true,\n          logLevel: BackgroundGeolocation.LOG_LEVEL_VERBOSE,\n          distanceFilter: 10,\n          stopTimeout: 1,\n          stopOnTerminate: false,\n          startOnBoot: true,\n          url: environment.TRACKER_HOST + '/api/locations',\n          // [Android] backgroundPermissionRationale for Always permission.\n          backgroundPermissionRationale: {\n            title: \"Allow {applicationName} to access this device's location even when closed or not in use.\",\n            message: \"This app collects location data to enable recording your trips to work and calculate distance-travelled.\",\n            positiveAction: 'Change to \"{backgroundPermissionOptionLabel}\"',\n            negativeAction: 'Cancel'\n          },\n          authorization: {\n            strategy: 'jwt',\n            accessToken: token.accessToken,\n            refreshToken: token.refreshToken,\n            refreshUrl: environment.TRACKER_HOST + '/api/refresh_token',\n            refreshPayload: {\n              refresh_token: '{refreshToken}'\n            },\n            expires: token.expires\n          },\n          autoSync: true\n        }).then(state => {\n          // Update UI state (toggle switch, changePace button)\n          _this.addEvent('State', new Date(), state);\n          _this.zone.run(() => {\n            _this.isMoving = state.isMoving;\n            _this.enabled = state.enabled;\n          });\n        });\n      })();\n    }\n    // Return to Home screen (app switcher)\n    onClickHome() {\n      this.navCtrl.navigateBack('/home');\n    }\n    // #start / #stop tracking\n    onToggleEnabled() {\n      if (this.enabled) {\n        BackgroundGeolocation.start();\n      } else {\n        BackgroundGeolocation.stop();\n      }\n    }\n    // Fetch the current position\n    onClickGetCurrentPosition() {\n      BackgroundGeolocation.getCurrentPosition({\n        persist: true\n      }, location => {\n        console.log('- getCurrentPosition: ', location);\n      }, error => {\n        console.warn('- Location error: ', error);\n      });\n    }\n    // Change plugin state between stationary / tracking\n    onClickChangePace() {\n      this.isMoving = !this.isMoving;\n      BackgroundGeolocation.changePace(this.isMoving);\n    }\n    // Clear the list of events from ion-list\n    onClickClear() {\n      this.events = [];\n    }\n    /// @event enabledchange\n    onEnabledChange(enabled) {\n      this.isMoving = false;\n      this.addEvent('onEnabledChange', new Date(), {\n        enabled: enabled\n      });\n    }\n    /// @event location\n    onLocation(location) {\n      console.log('[event] location: ', location);\n      this.addEvent('onLocation', new Date(location.timestamp), location);\n    }\n    /// @event motionchange\n    onMotionChange(event) {\n      console.log('[event] motionchange, isMoving: ', event.isMoving, ', location: ', event.location);\n      this.addEvent('onMotionChange', new Date(event.location.timestamp), event);\n      this.isMoving = event.isMoving;\n    }\n    /// @event activitychange\n    onActivityChange(event) {\n      console.log('[event] activitychange: ', event);\n      this.addEvent('onActivityChange', new Date(), event);\n    }\n    /// @event geofence\n    onGeofence(event) {\n      console.log('[event] geofence: ', event);\n      this.addEvent('onGeofence', new Date(event.location.timestamp), event);\n    }\n    /// @event http\n    onHttp(response) {\n      console.log('[event] http: ', response);\n      this.addEvent('onHttp', new Date(), response);\n    }\n    /// @event providerchange\n    onProviderChange(provider) {\n      console.log('[event] providerchange', provider);\n      this.addEvent('onProviderChange', new Date(), provider);\n    }\n    /// @event powersavechange\n    onPowerSaveChange(isPowerSaveEnabled) {\n      console.log('[event] powersavechange', isPowerSaveEnabled);\n      this.addEvent('onPowerSaveChange', new Date(), {\n        isPowerSaveEnabled: isPowerSaveEnabled\n      });\n    }\n    /// @event connectivitychange\n    onConnectivityChange(event) {\n      console.log('[event] connectivitychange connected? ', event.connected);\n      this.addEvent('onConnectivityChange', new Date(), event);\n    }\n    /// @event authorization\n    onAuthorization(event) {\n      console.log('[event] authorization: ', event);\n    }\n    /// Add a record to ion-list\n    addEvent(name, date, event) {\n      const timestamp = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n      this.zone.run(() => {\n        this.events.push({\n          name: name,\n          timestamp: timestamp,\n          object: event,\n          content: JSON.stringify(event, null, 2)\n        });\n      });\n    }\n  }\n  _class = HelloWorldPage;\n  _class.ɵfac = function HelloWorldPage_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.NavController), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-hello-world\"]],\n    decls: 24,\n    vars: 4,\n    consts: [[\"color\", \"tertiary\"], [\"mode\", \"ios\", \"color\", \"dark\"], [\"slot\", \"start\"], [3, \"click\"], [\"name\", \"close\"], [\"slot\", \"end\"], [2, \"display\", \"block\", 3, \"ngModel\", \"ngModelChange\", \"ionChange\"], [\"class\", \"event\", 4, \"ngFor\", \"ngForOf\"], [\"mode\", \"ios\", \"color\", \"tertiary\"], [\"fill\", \"solid\", \"color\", \"primary\", 2, \"width\", \"50px\", 3, \"click\"], [\"name\", \"navigate-circle-outline\", \"color\", \"\"], [\"mode\", \"ios\"], [\"fill\", \"outline\", \"color\", \"danger\", 2, \"width\", \"75px\", 3, \"click\"], [\"fill\", \"solid\", 2, \"width\", \"50px\", 3, \"color\", \"click\"], [3, \"name\"], [1, \"event\"], [1, \"ion-justify-content-start\", \"header\"], [\"size\", \"6\", 1, \"ion-align-self-start\", \"ion-align-items-center\"], [1, \"timestamp\"]],\n    template: function HelloWorldPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-title\", 1);\n        i0.ɵɵtext(3, \"BG Geolocation Demo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-buttons\", 2)(5, \"ion-button\", 3);\n        i0.ɵɵlistener(\"click\", function HelloWorldPage_Template_ion_button_click_5_listener() {\n          return ctx.onClickHome();\n        });\n        i0.ɵɵelement(6, \"ion-icon\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"ion-buttons\", 5)(8, \"ion-toggle\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldPage_Template_ion_toggle_ngModelChange_8_listener($event) {\n          return ctx.enabled = $event;\n        })(\"ionChange\", function HelloWorldPage_Template_ion_toggle_ionChange_8_listener() {\n          return ctx.onToggleEnabled();\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(9, \"ion-content\")(10, \"ion-list\");\n        i0.ɵɵtemplate(11, HelloWorldPage_ion_grid_11_Template, 12, 3, \"ion-grid\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"ion-footer\")(13, \"ion-toolbar\", 8)(14, \"ion-buttons\", 2)(15, \"ion-button\", 9);\n        i0.ɵɵlistener(\"click\", function HelloWorldPage_Template_ion_button_click_15_listener() {\n          return ctx.onClickGetCurrentPosition();\n        });\n        i0.ɵɵelement(16, \"ion-icon\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"ion-title\", 11)(18, \"ion-buttons\")(19, \"ion-button\", 12);\n        i0.ɵɵlistener(\"click\", function HelloWorldPage_Template_ion_button_click_19_listener() {\n          return ctx.onClickClear();\n        });\n        i0.ɵɵtext(20, \"Clear\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"ion-buttons\", 5)(22, \"ion-button\", 13);\n        i0.ɵɵlistener(\"click\", function HelloWorldPage_Template_ion_button_click_22_listener() {\n          return ctx.onClickChangePace();\n        });\n        i0.ɵɵelement(23, \"ion-icon\", 14);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.enabled);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.events.slice().reverse());\n        i0.ɵɵadvance(11);\n        i0.ɵɵpropertyInterpolate(\"color\", ctx.isMoving ? \"danger\" : \"secondary\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"name\", ctx.isMoving ? \"pause\" : \"play\");\n      }\n    },\n    dependencies: [i3.NgForOf, i4.NgControlStatus, i4.NgModel, i1.IonButton, i1.IonButtons, i1.IonCol, i1.IonContent, i1.IonFooter, i1.IonGrid, i1.IonHeader, i1.IonIcon, i1.IonLabel, i1.IonList, i1.IonRow, i1.IonTitle, i1.IonToggle, i1.IonToolbar, i1.BooleanValueAccessor],\n    styles: [\"ion-list[_ngcontent-%COMP%]{padding:5px 5px 0}.event[_ngcontent-%COMP%]{border:2px solid black;margin-bottom:5px;padding:0}.event[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{background-color:#000;color:#fff}.event[_ngcontent-%COMP%]   .timestamp[_ngcontent-%COMP%]{font-size:14px;text-align:right}.event[_ngcontent-%COMP%]   ion-col[_ngcontent-%COMP%]{padding:10px}.event[_ngcontent-%COMP%]   code[_ngcontent-%COMP%]{font-size:12px}\"]\n  });\n  return HelloWorldPage;\n})();\nexport { HelloWorldPage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/chris/workspace/background-geolocation/cordova/SampleApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n////\n// Normally once wouldn't include the plugin like this.  It's done to allow me to\n// easily switch between importing the npm vs paid version by editing a single file.\n//\nimport BackgroundGeolocation from \"../../cordova-background-geolocation\";\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nconst LocalStorage = window.localStorage;\nconst APP_SETTINGS = [{\n  name: 'geofenceRadius',\n  defaultValue: 200\n}, {\n  name: 'geofenceNotifyOnEntry',\n  defaultValue: true\n}, {\n  name: 'geofenceNotifyOnExit',\n  defaultValue: false\n}, {\n  name: 'geofenceNotifyOnDwell',\n  defaultValue: false\n}, {\n  name: 'geofenceLoiteringDelay',\n  defaultValue: 30000\n}, {\n  name: 'mapHideMarkers',\n  defaultValue: false\n}, {\n  name: 'mapHidePolyline',\n  defaultValue: false\n}, {\n  name: 'mapHideGeofenceHits',\n  defaultValue: false\n}, {\n  name: 'email',\n  defaultValue: null\n}];\nconst GEOFENCE_RADIUS_OPTIONS = [50, 100, 150, 200, 500, 1000];\nconst GEOFENCE_LOITERING_DELAY_OPTIONS = [1 * 1000, 10 * 1000, 30 * 1000, 60 * 1000, 5 * 60 * 1000];\nlet SettingsService = /*#__PURE__*/(() => {\n  var _class;\n  class SettingsService {\n    constructor(alertCtrl, toastCtrl) {\n      this.alertCtrl = alertCtrl;\n      this.toastCtrl = toastCtrl;\n      this.geofenceRadiusOptions = GEOFENCE_RADIUS_OPTIONS;\n      this.geofenceLoiteringDelayOptions = GEOFENCE_LOITERING_DELAY_OPTIONS;\n      this.applicationState = {};\n      this.init();\n    }\n    init() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const json = LocalStorage.getItem('settings');\n        if (json) {\n          _this.loadState(JSON.parse(json));\n        } else {\n          APP_SETTINGS.forEach(setting => {\n            _this.applicationState[setting.name] = setting.defaultValue;\n          });\n          _this.saveState();\n        }\n      })();\n    }\n    getApplicationState() {\n      return this.applicationState;\n    }\n    onChange(name) {\n      if (this.myState[name] === this.applicationState[name]) {\n        return;\n      }\n      this.saveState();\n      /**\n      * TODO\n      this.events.publish('change', name, this.applicationState[name]);\n      */\n    }\n\n    set(name, value) {\n      if (!this.applicationState.hasOwnProperty(name)) {\n        console.warn(\"SettingsService#set: Unknown property \", name);\n        return;\n      }\n      if (this.myState[name] === value) {\n        return;\n      }\n      this.applicationState[name] = value;\n      this.saveState();\n      /**\n      * TODO\n           this.events.publish('change', name, value);\n           */\n    }\n\n    get(name) {\n      if (this.applicationState.hasOwnProperty(name)) {\n        return this.applicationState[name];\n      } else {\n        return null;\n      }\n    }\n    toast(message, result, duration) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (typeof result !== undefined) {\n          message = message.replace(\"\\{result\\}\", result);\n        }\n        let toast = yield _this2.toastCtrl.create({\n          message: message,\n          duration: duration || 2000\n        });\n        toast.present();\n      })();\n    }\n    confirm(title, message, callback) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        let alert = yield _this3.alertCtrl.create({\n          header: title,\n          message: message,\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            handler: () => {}\n          }, {\n            text: 'Confirm',\n            handler: callback\n          }]\n        });\n        alert.present();\n      })();\n    }\n    /**\n    * Subscribe to BGService events\n    */\n    on(event, callback) {\n      /**\n      * TODO\n      this.events.subscribe(event, callback);\n           */\n    }\n    /**\n    * My private test config.\n    * DO NOT USE\n    * @private\n    */\n    applyTestConfig() {\n      return _asyncToGenerator(function* () {\n        let geofences = [{\n          \"identifier\": \"[CAP] Home\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51872221233045,\n          \"longitude\": -73.60041976465013,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51872221233045,\n              \"longitude\": -73.60041976465013\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Parc Outremont\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51791915253888,\n          \"longitude\": -73.60480434117284,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51791915253888,\n              \"longitude\": -73.60480434117284\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] 5 Saison\",\n          \"radius\": 200.0,\n          \"latitude\": 45.52193435702239,\n          \"longitude\": -73.60793815706307,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 0,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.52193435702239,\n              \"longitude\": -73.60793815706307\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Laj\",\n          \"radius\": 200.0,\n          \"latitude\": 45.52011166353691,\n          \"longitude\": -73.61188565687189,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 0,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.52011166353691,\n              \"longitude\": -73.61188565687189\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Park Beaubien\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51536622906458,\n          \"longitude\": -73.60916110960558,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 0,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51536622906458,\n              \"longitude\": -73.60916110960558\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Parc & Fairmount\",\n          \"radius\": 200.0,\n          \"latitude\": 45.5204308608878,\n          \"longitude\": -73.59730225310089,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.5204308608878,\n              \"longitude\": -73.59730225310089\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Parc Couches Tard\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51744539760233,\n          \"longitude\": -73.5908963928221,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 0,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51744539760233,\n              \"longitude\": -73.5908963928221\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Laurier & CÃ´tes Saint Catherines\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51602235252262,\n          \"longitude\": -73.59890979915006,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51602235252262,\n              \"longitude\": -73.59890979915006\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Mountain 1\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51339446482965,\n          \"longitude\": -73.5890430151955,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51339446482965,\n              \"longitude\": -73.5890430151955\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Mountain 2\",\n          \"radius\": 200.0,\n          \"latitude\": 45.511936585973096,\n          \"longitude\": -73.59662309075495,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.511936585973096,\n              \"longitude\": -73.59662309075495\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Mountain 3\",\n          \"radius\": 200.0,\n          \"latitude\": 45.50873361477508,\n          \"longitude\": -73.59089814860727,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.50873361477508,\n              \"longitude\": -73.59089814860727\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Mountain 4\",\n          \"radius\": 200.0,\n          \"latitude\": 45.50414694296492,\n          \"longitude\": -73.5916710539562,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.50414694296492,\n              \"longitude\": -73.5916710539562\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Mountain 5\",\n          \"radius\": 200.0,\n          \"latitude\": 45.50491473767328,\n          \"longitude\": -73.58654527405864,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.50491473767328,\n              \"longitude\": -73.58654527405864\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Mountain Lake\",\n          \"radius\": 200.0,\n          \"latitude\": 45.49860916086097,\n          \"longitude\": -73.59621565704647,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.49860916086097,\n              \"longitude\": -73.59621565704647\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Park JFK\",\n          \"radius\": 200.0,\n          \"latitude\": 45.52135522992923,\n          \"longitude\": -73.61568446341691,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": false,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.52135522992923,\n              \"longitude\": -73.61568446341691\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Rope Park\",\n          \"radius\": 200.0,\n          \"latitude\": 45.51335215591131,\n          \"longitude\": -73.58016477295465,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.51335215591131,\n              \"longitude\": -73.58016477295465\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Cafe Union\",\n          \"radius\": 200.0,\n          \"latitude\": 45.5332674993574,\n          \"longitude\": -73.61939297593483,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.5332674993574,\n              \"longitude\": -73.61939297593483\n            }\n          }\n        }, {\n          \"identifier\": \"[CAP] Park Laurier\",\n          \"radius\": 200.0,\n          \"latitude\": 45.53237479609443,\n          \"longitude\": -73.58741778627864,\n          \"notifyOnEntry\": true,\n          \"notifyOnExit\": true,\n          \"notifyOnDwell\": true,\n          \"loiteringDelay\": 60000,\n          \"extras\": {\n            \"radius\": 200,\n            \"center\": {\n              \"latitude\": 45.53237479609443,\n              \"longitude\": -73.58741778627864\n            }\n          }\n        }];\n        yield BackgroundGeolocation.removeGeofences();\n        yield BackgroundGeolocation.addGeofences(geofences);\n        yield BackgroundGeolocation.resetOdometer();\n        const orgname = LocalStorage.getItem('orgname');\n        const username = LocalStorage.getItem('username');\n        let token = yield BackgroundGeolocation.findOrCreateTransistorAuthorizationToken(orgname, username, environment.TRACKER_HOST);\n        yield BackgroundGeolocation.reset({\n          debug: true,\n          logLevel: BackgroundGeolocation.LOG_LEVEL_VERBOSE,\n          desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH,\n          distanceFilter: 50,\n          disableElasticity: false,\n          locationUpdateInterval: 1000,\n          fastestLocationUpdateInterval: -1,\n          stopTimeout: 1,\n          motionTriggerDelay: 30000,\n          transistorAuthorizationToken: token,\n          backgroundPermissionRationale: {\n            title: \"Allow {applicationName} to access this device's location even when the app is closed or not in use.\",\n            message: \"This app collects location data to enable recording your trips to work and calculate distance-travelled.\",\n            positiveAction: 'Change to \"{backgroundPermissionOptionLabel}\"',\n            negativeAction: 'Cancel'\n          },\n          schedule: [\n            //'2-6 09:00-17:00'\n          ],\n          scheduleUseAlarmManager: true,\n          maxDaysToPersist: 14,\n          geofenceModeHighAccuracy: true,\n          stopOnTerminate: false,\n          startOnBoot: true,\n          enableHeadless: true,\n          heartbeatInterval: -1\n        });\n      })();\n    }\n    loadState(json) {\n      this.applicationState = JSON.parse(json);\n      let invalid = false;\n      APP_SETTINGS.forEach(setting => {\n        if (!this.applicationState.hasOwnProperty(setting.name)) {\n          this.applicationState[setting.name] = setting.defaultValue;\n          invalid = true;\n        }\n      });\n      if (!invalid) {\n        this.saveState();\n      }\n      this.myState = Object.assign({}, this.applicationState);\n    }\n    saveState() {\n      LocalStorage.setItem('settings', JSON.stringify(this.applicationState, null));\n      this.myState = Object.assign({}, this.applicationState);\n    }\n  }\n  _class = SettingsService;\n  _class.Éµfac = function SettingsService_Factory(t) {\n    return new (t || _class)(i0.ÉµÉµinject(i1.AlertController), i0.ÉµÉµinject(i1.ToastController));\n  };\n  _class.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: _class,\n    factory: _class.Éµfac\n  });\n  return SettingsService;\n})();\nexport { SettingsService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}